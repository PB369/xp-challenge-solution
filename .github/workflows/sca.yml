name: SCA Pipeline (React Native)

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  contents: read
  security-events: write  # necessário para upload de SARIF

jobs:
  snyk:
    runs-on: ubuntu-latest

    env:
      SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # Node para deps JS do React Native
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: ${{ hashFiles('**/yarn.lock') != '' && 'yarn' || (hashFiles('**/package-lock.json') != '' && 'npm' || '') }}

      - name: Install JS deps (yarn/npm)
        run: |
          if [ -f yarn.lock ]; then
            corepack enable
            yarn install --frozen-lockfile
          elif [ -f package-lock.json ]; then
            npm ci
          else
            npm install
          fi

      # JDK p/ varredura Gradle (Android)
      - name: Setup Java (for Gradle scanning)
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17

      # Snyk CLI
      - name: Install Snyk CLI
        run: npm install -g snyk

      # === Scans ===
      - name: Snyk JS (npm/yarn)
        if: env.SNYK_TOKEN != ''
        continue-on-error: true
        run: |
          mkdir -p reports
          snyk test --file=package.json \
            --json-file-output=reports/snyk-js.json \
            --sarif-file-output=reports/snyk-js.sarif || true

      - name: Snyk Android (Gradle)
        if: env.SNYK_TOKEN != '' && hashFiles('android/**/*.gradle*') != ''
        working-directory: android
        continue-on-error: true
        run: |
          mkdir -p ../reports
          snyk test \
            --json-file-output=../reports/snyk-android.json \
            --sarif-file-output=../reports/snyk-android.sarif || true

      - name: Snyk iOS (CocoaPods)
        if: env.SNYK_TOKEN != '' && hashFiles('ios/Podfile.lock') != ''
        continue-on-error: true
        run: |
          mkdir -p reports
          snyk test --file=ios/Podfile.lock --package-manager=cocoapods \
            --json-file-output=reports/snyk-ios.json \
            --sarif-file-output=reports/snyk-ios.sarif || true

      # Listar p/ conferir
      - name: List reports
        run: ls -la reports || true

      # Upload SARIF (aparece em Security → Code scanning alerts)
      - name: Upload SARIF (JS)
        if: hashFiles('reports/snyk-js.sarif') != ''
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: reports/snyk-js.sarif

      - name: Upload SARIF (Android)
        if: hashFiles('reports/snyk-android.sarif') != ''
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: reports/snyk-android.sarif

      - name: Upload SARIF (iOS)
        if: hashFiles('reports/snyk-ios.sarif') != ''
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: reports/snyk-ios.sarif

      # Artifact (vai aparecer como link "snyk-reports" no topo da run)
      - name: Upload Snyk Reports (Artifact)
        uses: actions/upload-artifact@v4
        with:
          name: snyk-reports
          path: reports
          if-no-files-found: error  # força erro se nada foi gerado (facilita diagnosticar)

      # Opcional: notificar Slack se houve falhas
      - name: Slack notify on vulnerabilities
        if: env.SLACK_WEBHOOK_URL != '' && (hashFiles('reports/*.sarif') != '')
        run: |
          curl -X POST -H 'Content-type: application/json' \
               --data '{"text":"⚠️ Snyk encontrou vulnerabilidades. Baixe o artifact *snyk-reports* ou veja em *Security → Code scanning alerts*."}' \
               "$SLACK_WEBHOOK_URL"
